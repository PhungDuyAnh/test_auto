<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/demoblaze/components/LoginModal.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/demoblaze/components/LoginModal.java" />
              <option name="originalContent" value="package demoblaze.components;&#10;&#10;import demoblaze.pages.BasePage;&#10;import org.openqa.selenium.WebDriver;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.FindBy;&#10;import org.openqa.selenium.support.PageFactory;&#10;import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;&#10;&#10;public class LoginModal extends BasePage {&#10;&#10;    // PageFactory elements&#10;    @FindBy(xpath = &quot;//input[@id='loginusername']&quot;)&#10;    private WebElement usernameField;&#10;&#10;    @FindBy(xpath = &quot;//input[@id='loginpassword']&quot;)&#10;    private WebElement passwordField;&#10;&#10;    @FindBy(xpath = &quot;//button[@onclick='logIn()']&quot;)&#10;    private WebElement loginButton;&#10;&#10;    @FindBy(xpath = &quot;//div[@id='logInModal']&quot;)&#10;    private WebElement loginModal;&#10;&#10;    // Constructor - use AjaxElementLocatorFactory to allow waiting for elements&#10;    public LoginModal(WebDriver driver) {&#10;        super(driver);&#10;        PageFactory.initElements(new AjaxElementLocatorFactory(driver, 10), this);&#10;    }&#10;&#10;    public void waitForModalVisible() {&#10;        waitForVisibility(loginModal);&#10;    }&#10;&#10;    public void waitForModalInvisible() {&#10;        waitForInvisibility(loginModal);&#10;    }&#10;&#10;    public void enterUsername(String username) {&#10;        set(usernameField, username);&#10;    }&#10;&#10;    public void enterPassword(String password) {&#10;        set(passwordField, password);&#10;    }&#10;&#10;    public String getLoginAlertText() {&#10;        return getAlertTextAndAccept();&#10;    }&#10;&#10;    public void clickLoginButton() {&#10;        click(loginButton);&#10;    }&#10;&#10;    // Convenience: login method&#10;    // Đăng nhập thành công: chờ modal invisible&#10;    public void loginSuccess(String username, String password) {&#10;        enterUsername(username);&#10;        enterPassword(password);&#10;        clickLoginButton();&#10;        waitForModalInvisible();&#10;    }&#10;&#10;    // Đăng nhập thất bại: không chờ modal invisible, xử lý alert ngay&#10;    public void loginFail(String username, String password) {&#10;        enterUsername(username);&#10;        enterPassword(password);&#10;        clickLoginButton();&#10;        // Không gọi waitForModalInvisible&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package demoblaze.components;&#10;&#10;import demoblaze.pages.BasePage;&#10;import org.openqa.selenium.WebDriver;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.FindBy;&#10;import org.openqa.selenium.support.PageFactory;&#10;import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;&#10;&#10;public class LoginModal extends BasePage {&#10;&#10;    // PageFactory elements&#10;    @FindBy(xpath = &quot;//input[@id='loginusername']&quot;)&#10;    private WebElement usernameField;&#10;&#10;    @FindBy(xpath = &quot;//input[@id='loginpassword']&quot;)&#10;    private WebElement passwordField;&#10;&#10;    @FindBy(xpath = &quot;//button[@onclick='logIn()']&quot;)&#10;    private WebElement loginButton;&#10;&#10;    @FindBy(xpath = &quot;//div[@id='logInModal']&quot;)&#10;    private WebElement loginModal;&#10;&#10;    // Constructor - use AjaxElementLocatorFactory to allow waiting for elements&#10;    public LoginModal(WebDriver driver) {&#10;        super(driver);&#10;        PageFactory.initElements(new AjaxElementLocatorFactory(driver, 10), this);&#10;    }&#10;&#10;    public void waitForModalVisible() {&#10;        waitForVisibility(loginModal);&#10;    }&#10;&#10;    public void waitForModalInvisible() {&#10;        waitForInvisibility(loginModal);&#10;    }&#10;&#10;    public void enterUsername(String username) {&#10;        set(usernameField, username);&#10;    }&#10;&#10;    public void enterPassword(String password) {&#10;        set(passwordField, password);&#10;    }&#10;&#10;    public String getLoginAlertText() {&#10;        return getAlertTextAndAccept();&#10;    }&#10;&#10;    public void clickLoginButton() {&#10;        click(loginButton);&#10;    }&#10;&#10;    // Convenience: login method&#10;    // Đăng nhập thành công: chờ modal invisible&#10;    public void loginSuccess(String username, String password) {&#10;        enterUsername(username);&#10;        enterPassword(password);&#10;        clickLoginButton();&#10;        waitForModalInvisible();&#10;    }&#10;&#10;    // Đăng nhập thất bại: không chờ modal invisible, xử lý alert ngay&#10;    public void loginFail(String username, String password) {&#10;        enterUsername(username);&#10;        enterPassword(password);&#10;        clickLoginButton();&#10;        // Không gọi waitForModalInvisible&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/demoblaze/pages/BasePage.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/demoblaze/pages/BasePage.java" />
              <option name="originalContent" value="package demoblaze.pages;&#10;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.openqa.selenium.*;&#10;import org.openqa.selenium.interactions.Actions;&#10;import org.openqa.selenium.support.ui.ExpectedConditions;&#10;import org.openqa.selenium.support.ui.Select;&#10;import org.openqa.selenium.support.ui.WebDriverWait;&#10;&#10;import java.time.Duration;&#10;import java.util.List;&#10;&#10;public class BasePage {&#10;&#10;    protected WebDriver driver;&#10;&#10;    protected WebDriverWait wait;&#10;&#10;    private static final Duration TIMEOUT = Duration.ofSeconds(10);&#10;&#10;    private static final Logger logger = LogManager.getLogger(BasePage.class);&#10;&#10;    public BasePage(WebDriver driver) {&#10;        this.driver = driver;&#10;        this.wait = new WebDriverWait(driver, TIMEOUT);&#10;    }&#10;&#10;    protected WebElement waitForVisibility(WebElement element) {&#10;        return wait.until(ExpectedConditions.visibilityOf(element));&#10;    }&#10;&#10;    protected void waitForInvisibility(WebElement element) {&#10;        wait.until(ExpectedConditions.invisibilityOf(element));&#10;    }&#10;&#10;    protected WebElement waitForClickable(WebElement element) {&#10;        return wait.until(ExpectedConditions.elementToBeClickable(element));&#10;    }&#10;&#10;    protected void waitForAlertIsPresentAndAccept() {&#10;        Alert alert = wait.until(ExpectedConditions.alertIsPresent());&#10;        alert.accept();&#10;    }&#10;&#10;    // Lấy nội dung alert và accept&#10;    protected String getAlertTextAndAccept() {&#10;        Alert alert = wait.until(ExpectedConditions.alertIsPresent());&#10;        String text = alert.getText();&#10;        alert.accept();&#10;        return text;&#10;    }&#10;&#10;    protected void click(WebElement element) {&#10;        try {&#10;            waitForClickable(element).click();&#10;        } catch (ElementClickInterceptedException e) {&#10;            // Scroll into view and retry with JS click fallback&#10;            ((JavascriptExecutor) driver).executeScript(&quot;arguments[0].scrollIntoView(true);&quot;, element);&#10;            try {&#10;                waitForClickable(element).click();&#10;            } catch (Exception ex) {&#10;                ((JavascriptExecutor) driver).executeScript(&quot;arguments[0].click();&quot;, element);&#10;            }&#10;        }&#10;    }&#10;&#10;    protected void set(WebElement element, String value) {&#10;        WebElement el = waitForVisibility(element);&#10;        el.clear();&#10;        el.sendKeys(value);&#10;    }&#10;&#10;    protected String getText(WebElement element) {&#10;        try {&#10;            return waitForVisibility(element).getText();&#10;        } catch (Exception e) {&#10;            return &quot;&quot;;&#10;        }&#10;    }&#10;&#10;    protected boolean isDisplayedSafe(WebElement element) {&#10;        try {&#10;            return waitForVisibility(element).isDisplayed();&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;&#10;    // Logging helper&#10;    protected void log(String message) {&#10;        logger.info(message);&#10;    }&#10;&#10;&#10;    // Navigation helpers&#10;    protected void goTo(String url) {&#10;        driver.get(url);&#10;    }&#10;&#10;    protected void back() {&#10;        driver.navigate().back();&#10;    }&#10;&#10;    protected void refresh() {&#10;        driver.navigate().refresh();&#10;    }&#10;&#10;&#10;    // Generic find methods&#10;    protected WebElement findElement(By by) {&#10;        return driver.findElement(by);&#10;    }&#10;&#10;    protected List&lt;WebElement&gt; findElements(By by) {&#10;        return driver.findElements(by);&#10;    }&#10;&#10;&#10;    // Dropdown select&#10;    protected void selectByVisibleText(WebElement element, String text) {&#10;        Select select = new Select(waitForVisibility(element));&#10;        select.selectByVisibleText(text);&#10;    }&#10;&#10;&#10;    // Mouse actions&#10;    protected void hover(WebElement element) {&#10;        Actions actions = new Actions(driver);&#10;        actions.moveToElement(waitForVisibility(element)).perform();&#10;    }&#10;&#10;    protected void dragAndDrop(WebElement source, WebElement target) {&#10;        Actions actions = new Actions(driver);&#10;        actions.dragAndDrop(waitForVisibility(source), waitForVisibility(target)).perform();&#10;    }&#10;&#10;&#10;    // File upload&#10;    protected void uploadFile(WebElement element, String filePath) {&#10;        waitForVisibility(element).sendKeys(filePath);&#10;    }&#10;&#10;    // Chờ element xuất hiện trên DOM&#10;    protected WebElement waitForElementPresent(By by) {&#10;        return wait.until(ExpectedConditions.presenceOfElementLocated(by));&#10;    }&#10;&#10;    // Chờ text xuất hiện trong element&#10;    protected boolean waitForText(WebElement element, String text) {&#10;        return wait.until(ExpectedConditions.textToBePresentInElement(element, text));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package demoblaze.pages;&#10;&#10;import org.apache.logging.log4j.LogManager;&#10;import org.apache.logging.log4j.Logger;&#10;import org.openqa.selenium.*;&#10;import org.openqa.selenium.interactions.Actions;&#10;import org.openqa.selenium.support.ui.ExpectedConditions;&#10;import org.openqa.selenium.support.ui.Select;&#10;import org.openqa.selenium.support.ui.WebDriverWait;&#10;&#10;import java.time.Duration;&#10;import java.util.List;&#10;&#10;public class BasePage {&#10;&#10;    protected WebDriver driver;&#10;&#10;    protected WebDriverWait wait;&#10;&#10;    private static final Duration TIMEOUT = Duration.ofSeconds(10);&#10;&#10;    private static final Logger logger = LogManager.getLogger(BasePage.class);&#10;&#10;    public BasePage(WebDriver driver) {&#10;        this.driver = driver;&#10;        this.wait = new WebDriverWait(driver, TIMEOUT);&#10;    }&#10;&#10;    protected WebElement waitForVisibility(WebElement element) {&#10;        return wait.until(ExpectedConditions.visibilityOf(element));&#10;    }&#10;&#10;    protected void waitForInvisibility(WebElement element) {&#10;        wait.until(ExpectedConditions.invisibilityOf(element));&#10;    }&#10;&#10;    protected WebElement waitForClickable(WebElement element) {&#10;        return wait.until(ExpectedConditions.elementToBeClickable(element));&#10;    }&#10;&#10;    protected void waitForAlertIsPresentAndAccept() {&#10;        Alert alert = wait.until(ExpectedConditions.alertIsPresent());&#10;        alert.accept();&#10;    }&#10;&#10;    // Lấy nội dung alert và accept&#10;    protected String getAlertTextAndAccept() {&#10;        Alert alert = wait.until(ExpectedConditions.alertIsPresent());&#10;        String text = alert.getText();&#10;        alert.accept();&#10;        return text;&#10;    }&#10;&#10;    protected void click(WebElement element) {&#10;        try {&#10;            waitForClickable(element).click();&#10;        } catch (ElementClickInterceptedException e) {&#10;            // Scroll into view and retry with JS click fallback&#10;            ((JavascriptExecutor) driver).executeScript(&quot;arguments[0].scrollIntoView(true);&quot;, element);&#10;            try {&#10;                waitForClickable(element).click();&#10;            } catch (Exception ex) {&#10;                ((JavascriptExecutor) driver).executeScript(&quot;arguments[0].click();&quot;, element);&#10;            }&#10;        }&#10;    }&#10;&#10;    protected void set(WebElement element, String value) {&#10;        WebElement el = waitForVisibility(element);&#10;        el.clear();&#10;        el.sendKeys(value);&#10;    }&#10;&#10;    protected String getText(WebElement element) {&#10;        try {&#10;            return waitForVisibility(element).getText();&#10;        } catch (Exception e) {&#10;            return &quot;&quot;;&#10;        }&#10;    }&#10;&#10;    protected boolean isDisplayedSafe(WebElement element) {&#10;        try {&#10;            return waitForVisibility(element).isDisplayed();&#10;        } catch (Exception e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;&#10;    // Logging helper&#10;    protected void log(String message) {&#10;        logger.info(message);&#10;    }&#10;&#10;&#10;    // Navigation helpers&#10;    protected void goTo(String url) {&#10;        driver.get(url);&#10;    }&#10;&#10;    protected void back() {&#10;        driver.navigate().back();&#10;    }&#10;&#10;    protected void refresh() {&#10;        driver.navigate().refresh();&#10;    }&#10;&#10;&#10;    // Generic find methods&#10;    protected WebElement findElement(By by) {&#10;        return driver.findElement(by);&#10;    }&#10;&#10;    protected List&lt;WebElement&gt; findElements(By by) {&#10;        return driver.findElements(by);&#10;    }&#10;&#10;&#10;    // Dropdown select&#10;    protected void selectByVisibleText(WebElement element, String text) {&#10;        Select select = new Select(waitForVisibility(element));&#10;        select.selectByVisibleText(text);&#10;    }&#10;&#10;&#10;    // Mouse actions&#10;    protected void hover(WebElement element) {&#10;        Actions actions = new Actions(driver);&#10;        actions.moveToElement(waitForVisibility(element)).perform();&#10;    }&#10;&#10;    protected void dragAndDrop(WebElement source, WebElement target) {&#10;        Actions actions = new Actions(driver);&#10;        actions.dragAndDrop(waitForVisibility(source), waitForVisibility(target)).perform();&#10;    }&#10;&#10;&#10;    // File upload&#10;    protected void uploadFile(WebElement element, String filePath) {&#10;        waitForVisibility(element).sendKeys(filePath);&#10;    }&#10;&#10;    // Chờ element xuất hiện trên DOM&#10;    protected WebElement waitForElementPresent(By by) {&#10;        return wait.until(ExpectedConditions.presenceOfElementLocated(by));&#10;    }&#10;&#10;    // Chờ text xuất hiện trong element&#10;    protected boolean waitForText(WebElement element, String text) {&#10;        return wait.until(ExpectedConditions.textToBePresentInElement(element, text));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/demoblaze/test/order/OrderTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/demoblaze/test/order/OrderTest.java" />
              <option name="originalContent" value="package demoblaze.test.order;&#10;&#10;import demoblaze.base.BaseTest;&#10;import demoblaze.utils.DataProviders;&#10;import org.testng.Assert;&#10;import org.testng.annotations.Listeners;&#10;import org.testng.annotations.Test;&#10;&#10;@Listeners(TestListener.class)&#10;public class OrderTest extends BaseTest {&#10;&#10;    @Test(dataProvider = &quot;loginData&quot;, dataProviderClass = DataProviders.class, groups = {&quot;smoke&quot;})&#10;    public void testLoginSuccess(String username, String password) {&#10;        homePage.clickLoginLink();&#10;        loginModal.loginSuccess(username, password);&#10;        Assert.assertTrue(homePage.getNameOfUser().contains(username), &quot;UserName must be displayed after login&quot;);&#10;    }&#10;&#10;    @Test(dataProvider = &quot;invalidLoginData&quot;, dataProviderClass = DataProviders.class, groups = {&quot;negative&quot;})&#10;    public void testLoginFail(String username, String password) {&#10;        homePage.clickLoginLink();&#10;        loginModal.loginFail(username, password);&#10;        String alertText = loginModal.getLoginAlertText();&#10;        Assert.assertEquals(alertText, &quot;Wrong password.&quot;, &quot;Alert message should match expected&quot;);&#10;    }&#10;&#10;    @Test(priority = 2, dataProvider = &quot;orderData&quot;, dataProviderClass = DataProviders.class, groups = {&quot;smoke&quot;})&#10;    public void testOrderSuccess(String name, String country, String city,&#10;                                 String creditCard, String month, String year) {&#10;        homePage.clickProductDetail();&#10;        productDetailPage.clickAddToCartButton();&#10;        productDetailPage.handleAlertAndAccept();&#10;        homePage.clickCartLink();&#10;        Assert.assertTrue(orderPage.isTotalPriceDisplayed(), &quot;Total price must be displayed after add to cart&quot;);&#10;        orderPage.clickPlaceOrderButton();&#10;        informationOrderModal.inputOrderInformation(name, country, city, creditCard, month, year);&#10;    }&#10;&#10;    @Test(priority = 3, dataProvider = &quot;emptyOrderData&quot;, dataProviderClass = DataProviders.class, groups = {&quot;negative&quot;})&#10;    public void testOrderWithEmptyFields(String name, String country, String city,&#10;                                         String creditCard, String month, String year) {&#10;        homePage.clickProductDetail();&#10;        productDetailPage.clickAddToCartButton();&#10;        productDetailPage.handleAlertAndAccept();&#10;        homePage.clickCartLink();&#10;        orderPage.clickPlaceOrderButton();&#10;        informationOrderModal.inputOrderInformation(name, country, city, creditCard, month, year);&#10;        String alertText = informationOrderModal.getAlterText();&#10;        Assert.assertEquals(alertText, &quot;Please fill out Name and Creditcard.&quot;, &quot;Alert message should match expected&quot;);&#10;&#10;    }&#10;//&#10;//    @Test(priority = 5, groups = {&quot;negative&quot;})&#10;//    public void testOrderWithoutLogin() {&#10;//        homePage.clickProductDetail();&#10;//        productDetailPage.clickAddToCartButton();&#10;//        productDetailPage.handleAlertAndAccept();&#10;//        homePage.clickCartLink();&#10;//        orderPage.clickPlaceOrderButton();&#10;//        informationOrderModal.inputOrderInformation(&quot;Test&quot;, &quot;VN&quot;, &quot;HCM&quot;, &quot;123456&quot;, &quot;12&quot;, &quot;2025&quot;);&#10;//        Assert.assertFalse(informationOrderModal.isOrderSuccess(), &quot;Order should fail if user is not logged in&quot;);&#10;//    }&#10;}&#10;" />
              <option name="updatedContent" value="package demoblaze.test.order;&#10;&#10;import demoblaze.base.BaseTest;&#10;import demoblaze.utils.DataProviders;&#10;import org.testng.Assert;&#10;import org.testng.annotations.Listeners;&#10;import org.testng.annotations.Test;&#10;&#10;@Listeners(TestListener.class)&#10;public class OrderTest extends BaseTest {&#10;&#10;    @Test(dataProvider = &quot;loginData&quot;, dataProviderClass = DataProviders.class, groups = {&quot;smoke&quot;})&#10;    public void testLoginSuccess(String username, String password) {&#10;        homePage.clickLoginLink();&#10;        loginModal.loginSuccess(username, password);&#10;        Assert.assertTrue(homePage.getNameOfUser().contains(username), &quot;UserName must be displayed after login&quot;);&#10;    }&#10;&#10;    @Test(dataProvider = &quot;invalidLoginData&quot;, dataProviderClass = DataProviders.class, groups = {&quot;negative&quot;})&#10;    public void testLoginFail(String username, String password) {&#10;        homePage.clickLoginLink();&#10;        loginModal.loginFail(username, password);&#10;        String alertText = loginModal.getLoginAlertText();&#10;        Assert.assertEquals(alertText, &quot;Wrong password.&quot;, &quot;Alert message should match expected&quot;);&#10;    }&#10;&#10;    @Test(priority = 2, dataProvider = &quot;orderData&quot;, dataProviderClass = DataProviders.class, groups = {&quot;smoke&quot;})&#10;    public void testOrderSuccess(String name, String country, String city,&#10;                                 String creditCard, String month, String year) {&#10;        homePage.clickProductDetail();&#10;        productDetailPage.clickAddToCartButton();&#10;        productDetailPage.handleAlertAndAccept();&#10;        homePage.clickCartLink();&#10;        Assert.assertTrue(orderPage.isTotalPriceDisplayed(), &quot;Total price must be displayed after add to cart&quot;);&#10;        orderPage.clickPlaceOrderButton();&#10;        informationOrderModal.inputOrderInformation(name, country, city, creditCard, month, year);&#10;    }&#10;&#10;    @Test(priority = 3, dataProvider = &quot;emptyOrderData&quot;, dataProviderClass = DataProviders.class, groups = {&quot;negative&quot;})&#10;    public void testOrderWithEmptyFields(String name, String country, String city,&#10;                                         String creditCard, String month, String year) {&#10;        homePage.clickProductDetail();&#10;        productDetailPage.clickAddToCartButton();&#10;        productDetailPage.handleAlertAndAccept();&#10;        homePage.clickCartLink();&#10;        orderPage.clickPlaceOrderButton();&#10;        informationOrderModal.inputOrderInformation(name, country, city, creditCard, month, year);&#10;        String alertText = informationOrderModal.getAlterText();&#10;        Assert.assertEquals(alertText, &quot;Please fill out Name and Creditcard.&quot;, &quot;Alert message should match expected&quot;);&#10;&#10;    }&#10;//&#10;//    @Test(priority = 5, groups = {&quot;negative&quot;})&#10;//    public void testOrderWithoutLogin() {&#10;//        homePage.clickProductDetail();&#10;//        productDetailPage.clickAddToCartButton();&#10;//        productDetailPage.handleAlertAndAccept();&#10;//        homePage.clickCartLink();&#10;//        orderPage.clickPlaceOrderButton();&#10;//        informationOrderModal.inputOrderInformation(&quot;Test&quot;, &quot;VN&quot;, &quot;HCM&quot;, &quot;123456&quot;, &quot;12&quot;, &quot;2025&quot;);&#10;//        Assert.assertFalse(informationOrderModal.isOrderSuccess(), &quot;Order should fail if user is not logged in&quot;);&#10;//    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/demoblaze/utils/DataProviders.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/demoblaze/utils/DataProviders.java" />
              <option name="originalContent" value="package demoblaze.utils;&#10;&#10;import org.testng.annotations.DataProvider;&#10;&#10;public class DataProviders {&#10;&#10;    @DataProvider(name = &quot;loginData&quot;)&#10;    public static Object[][] loginData() {&#10;        return new Object[][]{&#10;                {&quot;admin&quot;, &quot;admin&quot;},&#10;        };&#10;    }&#10;&#10;    @DataProvider(name = &quot;invalidLoginData&quot;)&#10;    public static Object[][] invalidLoginData() {&#10;        return new Object[][]{&#10;                {&quot;user2&quot;, &quot;wrongpass&quot;},&#10;                {&quot;&quot;, &quot;&quot;},&#10;                {&quot;admin&quot;, &quot;wrongpass&quot;},&#10;        };&#10;    }&#10;&#10;    @DataProvider(name = &quot;orderData&quot;)&#10;    public static Object[][] orderData() {&#10;        return new Object[][]{&#10;                {&quot;DuyAnh&quot;, &quot;VN&quot;, &quot;HN&quot;, &quot;01230120321&quot;, &quot;09&quot;, &quot;2025&quot;},&#10;        };&#10;    }&#10;&#10;    @DataProvider(name = &quot;emptyOrderData&quot;)&#10;    public static Object[][] emptyOrderData() {&#10;        return new Object[][]{&#10;                {&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;},&#10;        };&#10;    }&#10;&#10;    @DataProvider(name = &quot;invalidCardOrderData&quot;)&#10;    public static Object[][] invalidCardOrderData() {&#10;        return new Object[][]{&#10;                {&quot;DuyAnh&quot;, &quot;VN&quot;, &quot;HN&quot;, &quot;abcde&quot;, &quot;09&quot;, &quot;2025&quot;},&#10;                {&quot;DuyAnh&quot;, &quot;VN&quot;, &quot;HN&quot;, &quot;!@#$%&quot;, &quot;09&quot;, &quot;2025&quot;},&#10;        };&#10;    }&#10;}" />
              <option name="updatedContent" value="package demoblaze.utils;&#10;&#10;import org.testng.annotations.DataProvider;&#10;&#10;public class DataProviders {&#10;&#10;    @DataProvider(name = &quot;loginData&quot;)&#10;    public static Object[][] loginData() {&#10;        return new Object[][]{&#10;                {&quot;admin&quot;, &quot;admin&quot;},&#10;        };&#10;    }&#10;&#10;    @DataProvider(name = &quot;invalidLoginData&quot;)&#10;    public static Object[][] invalidLoginData() {&#10;        return new Object[][]{&#10;                {&quot;user2&quot;, &quot;wrongpass&quot;},&#10;                {&quot;&quot;, &quot;&quot;},&#10;                {&quot;admin&quot;, &quot;wrongpass&quot;},&#10;        };&#10;    }&#10;&#10;    @DataProvider(name = &quot;orderData&quot;)&#10;    public static Object[][] orderData() {&#10;        return new Object[][]{&#10;                {&quot;DuyAnh&quot;, &quot;VN&quot;, &quot;HN&quot;, &quot;01230120321&quot;, &quot;09&quot;, &quot;2025&quot;},&#10;        };&#10;    }&#10;&#10;    @DataProvider(name = &quot;emptyOrderData&quot;)&#10;    public static Object[][] emptyOrderData() {&#10;        return new Object[][]{&#10;                {&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;},&#10;        };&#10;    }&#10;&#10;    @DataProvider(name = &quot;invalidCardOrderData&quot;)&#10;    public static Object[][] invalidCardOrderData() {&#10;        return new Object[][]{&#10;                {&quot;DuyAnh&quot;, &quot;VN&quot;, &quot;HN&quot;, &quot;abcde&quot;, &quot;09&quot;, &quot;2025&quot;},&#10;                {&quot;DuyAnh&quot;, &quot;VN&quot;, &quot;HN&quot;, &quot;!@#$%&quot;, &quot;09&quot;, &quot;2025&quot;},&#10;        };&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>