<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/demoblaze/components/LoginModal.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/demoblaze/components/LoginModal.java" />
              <option name="originalContent" value="package demoblaze.components;&#10;&#10;import demoblaze.pages.BasePage;&#10;import org.openqa.selenium.WebDriver;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.FindBy;&#10;import org.openqa.selenium.support.PageFactory;&#10;import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;&#10;&#10;public class LoginModal extends BasePage {&#10;&#10;    // PageFactory elements&#10;    @FindBy(xpath = &quot;//input[@id='loginusername']&quot;)&#10;    private WebElement usernameField;&#10;&#10;    @FindBy(xpath = &quot;//input[@id='loginpassword']&quot;)&#10;    private WebElement passwordField;&#10;&#10;    @FindBy(xpath = &quot;//button[@onclick='logIn()']&quot;)&#10;    private WebElement loginButton;&#10;&#10;    @FindBy(xpath = &quot;//div[@id='logInModal']&quot;)&#10;    private WebElement loginModal;&#10;&#10;    // Constructor - use AjaxElementLocatorFactory to allow waiting for elements&#10;    public LoginModal(WebDriver driver) {&#10;        super(driver);&#10;        PageFactory.initElements(new AjaxElementLocatorFactory(driver, 10), this);&#10;    }&#10;&#10;    public void waitForModalVisible() {&#10;        waitForVisibility(loginModal);&#10;    }&#10;&#10;    public void waitForModalInvisible() {&#10;        waitForInvisibility(loginModal);&#10;    }&#10;&#10;    public void enterUsername(String username) {&#10;        set(usernameField, username);&#10;    }&#10;&#10;    public void enterPassword(String password) {&#10;        set(passwordField, password);&#10;    }&#10;&#10;    public String getLoginAlertText() {&#10;        return getAlertTextAndAccept();&#10;    }&#10;&#10;    public void clickLoginButton() {&#10;        click(loginButton);&#10;    }&#10;&#10;    // Convenience: login method&#10;    // Đăng nhập thành công: chờ modal invisible&#10;    public void loginSuccess(String username, String password) {&#10;        enterUsername(username);&#10;        enterPassword(password);&#10;        clickLoginButton();&#10;        waitForModalInvisible();&#10;    }&#10;&#10;    // Đăng nhập thất bại: không chờ modal invisible, xử lý alert ngay&#10;    public void loginFail(String username, String password) {&#10;        enterUsername(username);&#10;        enterPassword(password);&#10;        clickLoginButton();&#10;        // Không gọi waitForModalInvisible&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package demoblaze.components;&#10;&#10;import demoblaze.pages.BasePage;&#10;import org.openqa.selenium.WebDriver;&#10;import org.openqa.selenium.WebElement;&#10;import org.openqa.selenium.support.FindBy;&#10;import org.openqa.selenium.support.PageFactory;&#10;import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;&#10;&#10;public class LoginModal extends BasePage {&#10;&#10;    // PageFactory elements&#10;    @FindBy(xpath = &quot;//input[@id='loginusername']&quot;)&#10;    private WebElement usernameField;&#10;&#10;    @FindBy(xpath = &quot;//input[@id='loginpassword']&quot;)&#10;    private WebElement passwordField;&#10;&#10;    @FindBy(xpath = &quot;//button[@onclick='logIn()']&quot;)&#10;    private WebElement loginButton;&#10;&#10;    @FindBy(xpath = &quot;//div[@id='logInModal']&quot;)&#10;    private WebElement loginModal;&#10;&#10;    // Constructor - use AjaxElementLocatorFactory to allow waiting for elements&#10;    public LoginModal(WebDriver driver) {&#10;        super(driver);&#10;        PageFactory.initElements(new AjaxElementLocatorFactory(driver, 10), this);&#10;    }&#10;&#10;    public void waitForModalVisible() {&#10;        waitForVisibility(loginModal);&#10;    }&#10;&#10;    public void waitForModalInvisible() {&#10;        waitForInvisibility(loginModal);&#10;    }&#10;&#10;    public void enterUsername(String username) {&#10;        set(usernameField, username);&#10;    }&#10;&#10;    public void enterPassword(String password) {&#10;        set(passwordField, password);&#10;    }&#10;&#10;    public String getLoginAlertText() {&#10;        return getAlertTextAndAccept();&#10;    }&#10;&#10;    public void clickLoginButton() {&#10;        click(loginButton);&#10;    }&#10;&#10;    // Convenience: login method&#10;    // Đăng nhập thành công: chờ modal invisible&#10;    public void loginSuccess(String username, String password) {&#10;        enterUsername(username);&#10;        enterPassword(password);&#10;        clickLoginButton();&#10;        waitForModalInvisible();&#10;    }&#10;&#10;    // Đăng nhập thất bại: không chờ modal invisible, xử lý alert ngay&#10;    public void loginFail(String username, String password) {&#10;        enterUsername(username);&#10;        enterPassword(password);&#10;        clickLoginButton();&#10;        // Không gọi waitForModalInvisible&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>